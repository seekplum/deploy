---

- name: "清除hosts配置"
  shell: 'sed -i "/^{{ hostvars[item].ansible_default_ipv4.address }}.*$/d" /etc/hosts; sed -i "/^.*{{ hostvars[item].ansible_hostname }}$/d" /etc/hosts'
  with_items:
    - '{{groups["masters"][0]}}'
    - '{{groups["slaves"][0]}}'
    - '{{groups["slaves"][1]}}'
  tags:
    - kubeadm
  when: is_linux_os

- name: "配置hosts"
  shell: 'echo {{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].ansible_hostname }} >> /etc/hosts'
  with_items:
    - '{{groups["masters"][0]}}'
    - '{{groups["slaves"][0]}}'
    - '{{groups["slaves"][1]}}'
  tags:
    - kubeadm
  when: is_linux_os

- name: "Ubuntu关闭防火墙"
  shell: 'ufw disable'
  tags:
    - kubeadm
  when: is_ubuntu_os

- name: "RedHat关闭防火墙"
  service:
    name: "firewalld"
    state: "stopped"
    enabled: "no"
  tags:
    - kubeadm
  when: is_centos_os

- name: "修改docker启动配置"
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
    mode: 0644
    force: true
    backup: true # 进行备份
  tags:
    - kubeadm
  when: is_linux_os

- name: "临时关闭交换分区"
  shell: swapoff -a
  tags:
    - kubeadm
  when: is_linux_os

- name: "获取交换分区名字"
  shell: cat /etc/fstab | grep " swap " | awk '{print $1}'
  register: swap_name
  changed_when: False
  tags:
    - kubeadm
  when: is_linux_os

- name: "永久关闭交换分区"
  shell: sed -i "s#^{{ swap_name.stdout }}#\#&#g" /etc/fstab
  tags:
    - kubeadm
  when: is_linux_os and not swap_name.stdout.startswith("#")


- name: "Ubuntu添加阿里源"
  shell: "curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -"
  changed_when: False
  tags:
    - kubeadm
  when: is_ubuntu_os

- name: "Ubuntu修改k8s源内容"
  shell:
    cmd: |
      tee /etc/apt/sources.list.d/kubernetes.list <<EOF
      deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
      EOF
  tags:
    - kubeadm
  when: is_ubuntu_os

- name: "RedHat添加阿里源"
  shell:
    cmd: |
      cat >/etc/yum.repos.d/kubernetes.repo<<EOF
      [kubernetes]
      name=kubernetes
      baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
      gpgcheck=0
      enable=1
      EOF
  changed_when: False
  tags:
    - kubeadm
  when: is_centos_os

- name: "配置k8s内核参数"
  shell:
    cmd: |
      cat >/etc/sysctl.d/k8s.conf<<EOF
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      vm.swappiness=0
      EOF
  tags:
    - kubeadm
  when: is_linux_os

- name: "生效内核参数"
  shell: sysctl --system
  tags:
    - kubeadm
  when: is_linux_os

- name: "RedHat安装kubeadm"
  yum:
    name: "{{item}}"
    state: present
    update_cache: true
  with_items:
    - kubelet
    - kubectl
    - kubeadm
  tags:
    - kubeadm
  when: is_centos_os

- name: "Ubuntu安装kubeadm"
  apt:
    pkg: "{{item}}"
    state: present
    update_cache: true
  with_items:
    - kubelet
    - kubectl
    - kubeadm
  tags:
    - kubeadm
  when: is_ubuntu_os

- name: "获取kubeadm版本"
  shell: kubeadm version | grep -E -o 'GitVersion:"(v[0-9\.]+)"' | grep -E -o '(v[0-9\.]+)'
  register: kubeadm_version
  changed_when: False
  tags:
    - kubeadm
  when: is_linux_os

- name: "重启Docker"
  shell: systemctl daemon-reload && systemctl restart docker
  tags:
    - kubeadm
  when: is_linux_os

- name: "重启kubelet"
  shell: systemctl daemon-reload && systemctl enable kubelet && systemctl restart kubelet
  tags:
    - kubeadm
  when: is_linux_os

- name: "检查kubeadm-flags.env文件是否存在"
  shell: "test -f /var/lib/kubelet/kubeadm-flags.env && echo 0 || echo 1"
  register: existing_of_flags
  changed_when: False
  tags:
    - kubeadm
  when: is_linux_os

- name: "修改kubelet cgroup类型"
  shell: 'sed -i "s/--cgroup-driver=[a-zA-Z]*/--cgroup-driver=systemd/g" /var/lib/kubelet/kubeadm-flags.env'
  ignore_errors: True
  tags:
    - kubeadm
  when: is_linux_os and existing_of_flags == "0"

- name: "脚本方式拉取镜像"
  script: "pull-images.sh"
  changed_when: False
  tags:
    - kubeadm
  when: is_linux_os

- name: "删除重复的文件"
  file:
    path: "{{item}}"
    state: absent
    force: true
  with_items:
    - "/etc/kubernetes/manifests/kube-apiserver.yaml"
    - "/etc/kubernetes/manifests/kube-controller-manager.yaml"
    - "/etc/kubernetes/manifests/kube-scheduler.yaml"
    - "/etc/kubernetes/manifests/etcd.yaml"
  tags:
    - kubeadm
  when: is_master_node

- name: "Master修改server"
  shell: 'test -f {{item}} && sed -i "s#server: https://.*:6443#server: https://{{ansible_default_ipv4.address}}:6443#g" {{item}} || echo {{item}} not exists'
  ignore_errors: True
  with_items:
    - '/etc/kubernetes/kubelet.conf'
    - '/etc/kubernetes/controller-manager.conf'
    - '/etc/kubernetes/scheduler.conf'
  tags:
    - kubeadm
  when: is_master_node

- name: "检查CNI插件是否已经下载"
  shell: "test -f {{CNI_PLUGINS_PATH_ON_LINUX}} && echo 0 || echo 1"
  register: existing_of_cni_plugins
  changed_when: False
  tags:
    - kubeadm
  when: is_linux_os

- name: "安装CNI插件"
  block:
    - name: "创建目录"
      shell: "mkdir -p {{CNI_PLUGINS_DIRECTOR_ON_LINUX}}"

    - name: "下载CNI插件"
      get_url:
        url: "{{CNI_PLUGINS_URL_ON_LINUX}}"
        dest: "{{CNI_PLUGINS_PATH_ON_LINUX}}"
        force: false
      when: existing_of_cni_plugins.stdout == "1"

    - name: "解压CNI插件"
      unarchive:
        src: "{{CNI_PLUGINS_PATH_ON_LINUX}}"
        dest: "{{CNI_PLUGINS_DIRECTOR_ON_LINUX}}"
        remote_src: true
  tags:
    - kubeadm
  when: is_linux_os

- name: "Master初始化"
  shell: "{{item}}"
  register: kubeadm_init
  with_items:
    - "netstat -alnp | grep -E ':6443 |:10251 |:10252 |:10250 ' | awk '{print $7}' | cut -d'/' -f1 | grep -v '-' | xargs kill -9 >/dev/null 2&> 1"
    - "kubeadm init"
  ignore_errors: True
  tags:
    - kubeadm
  when: is_master_node

- name: "输出初始化信息"
  debug:
    msg: "{{ kubeadm_init }}"
  tags:
    - kubeadm
  when: is_master_node

- name: "Master初始化后操作"
  shell: "{{item}}"
  with_items:
    - "mkdir -p $HOME/.kube"
    - "scp /etc/kubernetes/admin.conf $HOME/.kube/config"
    - "chown $(id -u):$(id -g) $HOME/.kube/config"
  tags:
    - kubeadm
  when: is_master_node

- name: "Master安装Pod网络"
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  tags:
    - kubeadm
  when: is_master_node

- name: "修复coredns角色异常"
  # https://github.com/coredns/helm/issues/9
  shell: kubectl get clusterrole system:coredns -o yaml | sed '$a- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - list\n  - watch' |  kubectl replace -f -
  tags:
    - kubeadm
  when: is_master_node

- name: "修复组件健康状态异常"
  shell: sed -i "s/- --port=0/# &/g" /etc/kubernetes/manifests/kube-scheduler.yaml /etc/kubernetes/manifests/kube-controller-manager.yaml
  tags:
    - kubeadm
  when: is_master_node

- name: "重启kubelet"
  service:
    name: "kubelet"
    state: "restarted"
    enabled: "yes"
  tags:
    - kubeadm
  when: is_master_node
